import pandas as pd
from sklearn.datasets import load_iris

# load Iris Data
iris = load_iris()

# set to dataframe and give new columns at the feature name
df = pd.DataFrame(iris.data, columns=iris.feature_names)
df["flower"] = iris.target
df["flower"] = df['flower'].apply(lambda x: iris.target_names[x])


''' approach 1: use train_test_split and manually tune parameters by trial and error '''
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(iris.data, iris.target, test_size=0.3, random_state=0)

''' create a model using svm '''
from sklearn.svm import SVC
model_ = SVC(gamma='auto', kernel='rbf')
model_.fit(X_train, y_train)
model_.score(X_test, y_test) # 0.9777777777777777

''' approach 2: use kfold cross validation '''
from sklearn.model_selection import cross_val_score
svc_score = cross_val_score(SVC(kernel='linear', C=10 ,gamma=1), iris.data, iris.target, cv=5)
svc_score # [1.         1.         0.9        0.96666667 1.        ]

svc_score = cross_val_score(SVC(kernel='rbf', C=10, gamma='auto'), iris.data, iris.target, cv=5)
svc_score # [0.96666667 1.         0.96666667 0.96666667 1.        ]

svc_score = cross_val_score(SVC(kernel='rbf', C=20, gamma='auto'), iris.data, iris.target, cv=5)
svc_score # [0.96666667 1.         0.9        0.96666667 1.        ]

svc_score = cross_val_score(SVC(kernel='rbf', C=100, gamma='auto'), iris.data, iris.target, cv=5)
svc_score # [1.         0.96666667 0.9        0.93333333 1.        ]

''' approach using loops '''
import numpy as np
kernels = ['rbf', 'linear']
C = [1, 10, 20]
avg_score = {}
for kernels_val in kernels:
    for cross_val in C:
        cv_scores = cross_val_score(SVC(kernel=kernels_val, C = cross_val, gamma='auto'), iris.data, iris.target)
        avg_score[kernels_val + "_" + str(cross_val)] = np.average(cv_scores)
avg_score 
'''
{'rbf_1': 0.9800000000000001, 'rbf_10': 0.9800000000000001, 'rbf_20': 0.9666666666666668, 'linear_1': 0.9800000000000001, 'linear_10': 0.9733333333333334, 'linear_20': 0.9666666666666666}
'''


''' Approach use gridsearchCV '''
from sklearn.model_selection import GridSearchCV
clf = GridSearchCV(SVC(gamma='auto'), {'C' : [1,10,20], 'kernel' : ['rbf', 'linear']}, cv=5, return_train_score=False)
clf.fit(iris.data, iris.target)
clf.cv_results_

# set it into a dataframe
data_ = pd.DataFrame(clf.cv_results_)
data_ 
'''
mean_fit_time  std_fit_time  mean_score_time  std_score_time  ... split4_test_score mean_test_score std_test_score  rank_test_score
    0.000270      0.000006         0.000176    4.191287e-06  ...               1.0        0.980000       0.016330                1
    0.000219      0.000010         0.000141    2.054277e-06  ...               1.0        0.980000       0.016330                1
    0.000249      0.000008         0.000159    2.003851e-06  ...               1.0        0.980000       0.016330                1
    0.000217      0.000011         0.000138    6.143617e-07  ...               1.0        0.973333       0.038873                4
    0.000250      0.000004         0.000157    2.096999e-06  ...               1.0        0.966667       0.036515                5
    0.000217      0.000005         0.000138    1.059824e-06  ...               1.0        0.966667       0.042164                6
'''
